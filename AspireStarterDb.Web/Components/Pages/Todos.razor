@page "/todos"
@attribute [StreamRendering(true)]

@inject TodosApiClient TodosApi
@inject NavigationManager Navigation

<PageTitle>Todos</PageTitle>

<h1>Todos</h1>

<p>This component demonstrates handling data loaded from a database via a backend API service.</p>

<EditForm EditContext="createEditContext" OnValidSubmit="CreateAsync" FormName="CreateTodo" Enhance class="mb-4">
    <DataAnnotationsValidator />

    <div class="row g-2 align-items-center">
        <div class="col-7">
            <div class="form-floating">
                <InputText @bind-Value="Todo!.Title" id="title"
                           class="@createEditContext.GetFieldClass(() => Todo!.Title)" placeholder="Mop the floor" />
                <label for="title">What do you need to do?</label>
            </div>
        </div>
        <div class="col-sm">
            <button type="submit" class="btn btn-primary" disabled="@(todos is null)">Add</button>
        </div>
    </div>
    <div class="row">
        <ValidationMessage For="() => Todo!.Title" />
        <ValidationMessage For="() => Todo" />
    </div>
</EditForm>

@if (todos == null)
{
    // Show a loading placeholder while the data is being fetched
    <div class="list-group list-group-flush col-12 col-lg-10 col-xl-8">
        @for (var i = 0; i < 5; i++)
        {
            <div class="list-group-item placeholder-glow"><span class="placeholder col-4"></span></div>
        }
    </div>
}
else if (todos.Length == 0)
{
    <p class="text-information">
        Todos list is empty! Add one using the form above.
    </p>
}
else
{
    <div class="list-group list-group-flush col-12 col-lg-10 col-xl-8">
        @foreach (var todo in todos)
        {
            var formName = $"UpdateTodo{todo.Id}";
            <div class="list-group-item todos-list">
                <div class="align-items-center @(todo.IsComplete ? "complete" : "incomplete")">
                    <form class="row" method="post" @formname="@formName" @onsubmit="UpdateAsync" data-enhance>
                        <AntiforgeryToken />
                        <input type="hidden" name="@(nameof(Todo)).@(nameof(Todo.Id))" @bind-value="todo.Id" />
                        @* First submit button is the default used when Enter is pressed to submit the form *@
                        <input type="submit" name="@nameof(UpdateCommand)" value="@Commands.SaveChanges" class="d-none" />
                        <div class="col-auto g-1">
                            @{
                                var icon = todo.IsComplete ? "bi-check-circle-fill" : "bi-circle";
                                var title = todo.IsComplete ? "Mark incomplete" : "Mark complete";
                                var command = todo.IsComplete ? Commands.SetIncomplete : Commands.SetComplete;
                            }
                            <button type="submit" class="btn" name="@nameof(UpdateCommand)"
                                    value="@command" title="@title">
                                <i class="bi @icon"></i>
                            </button>
                        </div>
                        <div class="col g-1">
                            <input type="text" class="form-control title" name="@(nameof(Todo)).@(nameof(Todo.Title))" @bind-value="todo.Title"
                                   readonly="@todo.IsComplete" />
                        </div>
                        <button type="submit" class="btn-close position-absolute top-50 end-0 translate-middle-y"
                                name="@nameof(UpdateCommand)" value="@Commands.Delete" title="Delete" aria-label="Delete"></button>
                    </form>
                </div>
            </div>
        }
    </div>
}

@code {
    private EditContext? createEditContext;
    private ValidationMessageStore? messageStore;
    private Todo[]? todos;

    [SupplyParameterFromForm]
    private Todo? Todo { get; set; }

    [SupplyParameterFromForm]
    private string UpdateCommand { get; set; } = Commands.SaveChanges;

    protected override async Task OnInitializedAsync()
    {
        Todo ??= new();
        createEditContext = new(Todo);
        messageStore = new(createEditContext);
        todos = await TodosApi.GetTodosAsync();
    }

    private async Task CreateAsync()
    {
        var (wasCreated, _, validationProblem) = await TodosApi.CreateTodoAsync(Todo!);

        if (wasCreated)
        {
            Navigation.Refresh();
        }
        else
        {
            messageStore.AddValidationErrors(createEditContext, validationProblem);
        }
    }

    private async Task UpdateAsync()
    {
        if (UpdateCommand == Commands.SetComplete)
        {
            await TodosApi.MarkCompleteAsync(Todo!.Id);
        }
        else if (UpdateCommand == Commands.SetIncomplete)
        {
            await TodosApi.MarkIncompleteAsync(Todo!.Id);
        }
        else if (UpdateCommand == Commands.Delete)
        {
            await TodosApi.DeleteTodoAsync(Todo!.Id);
        }
        else if (UpdateCommand == Commands.SaveChanges)
        {
            var (wasUpdated, validationProblem) = await TodosApi.UpdateTodoAsync(Todo!);
            if (!wasUpdated)
            {
                //messageStore.AddValidationErrors(createEditContext, validationProblem);
            }
        }
        Navigation.Refresh();
    }

    private static class Commands
    {
        public const string SetComplete = nameof(SetComplete);
        public const string SetIncomplete = nameof(SetIncomplete);
        public const string SaveChanges = nameof(SaveChanges);
        public const string Delete = nameof(Delete);
    }
}
