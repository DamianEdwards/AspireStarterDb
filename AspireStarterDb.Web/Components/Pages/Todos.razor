@page "/todos"
@attribute [StreamRendering(true)]

@inject TodosApiClient TodosApi
@inject NavigationManager Navigation

<PageTitle>Todos</PageTitle>

<h1>Todos</h1>

<p>This component demonstrates handling data loaded from a database via a backend API service.</p>

<div class="mb-4">
    <EditForm EditContext="createEditContext" OnValidSubmit="CreateAsync" FormName="CreateTodo" Enhance>
        <DataAnnotationsValidator />

        <div class="row g-2 align-items-center">
            <div class="col-7">
                <div class="form-floating">
                    <InputText @bind-Value="CreatingTodo!.Title" id="title"
                               class="@createEditContext.GetFieldClass(() => CreatingTodo!.Title)" placeholder="Mop the floor" />
                    <label for="title">What do you need to do?</label>
                </div>
            </div>
            <div class="col-sm">
                <button type="submit" class="btn btn-primary" disabled="@(todos is null)">Add</button>
            </div>
        </div>
        <div class="row">
            <ValidationMessage For="() => CreatingTodo.Title" />
            <ValidationMessage For="() => CreatingTodo" />
        </div>
    </EditForm>
</div>

@if (todos == null)
{
    // Show a loading placeholder while the data is being fetched
    <div class="list-group list-group-flush col-12 col-lg-10 col-xl-8">
        @for (var i = 0; i < 5; i++)
        {
            <div class="list-group-item placeholder-glow"><span class="placeholder col-4"></span></div>
        }
    </div>
}
else if (todos.Length == 0)
{
    <p class="text-information">
        Todos list is empty! Add one using the form above.
    </p>
}
else
{
    <div class="todos-list list-group list-group-flush col-12 col-lg-10 col-xl-8">
        @foreach (var todo in todos)
        {
            var (editContext, messageStore) = GetFormContext(todo);
            var completedButton = GetCompletedButtonAttributes(todo);

            <div class="list-group-item align-items-center @(todo.IsComplete ? "complete" : "incomplete")">
                <EditForm EditContext="editContext" Enhance class="position-relative">
                    <DataAnnotationsValidator />
                    @* Configure all edit forms to dispatch to the same target form handler *@
                    <input type="hidden" name="_handler" value="UpdateTodo" />
                    @* First submit button is the default used when Enter is pressed to submit the form even if hidden *@
                    <input type="submit" class="d-none" />

                    <div class="row align-items-center">
                        <input type="hidden" name="@(nameof(UpdatingTodo)).@(nameof(UpdatingTodo.Id))" @bind-value="todo.Id" />
                        <div class="col-auto g-1">
                            <button type="submit" class="btn btn-toggle-complete" name="@(nameof(UpdatingTodo)).@(nameof(UpdatingTodo.IsComplete))"
                                    value="@completedButton.Value" title="@completedButton.Title">
                                <i class="bi @completedButton.Icon"></i>
                            </button>
                        </div>
                        <div class="col g-1">
                            <div class="position-relative">
                                <input type="text" class="@editContext.GetFieldClass(() => todo.Title)" readonly="@todo.IsComplete"
                                       name="@(nameof(UpdatingTodo)).@(nameof(UpdatingTodo.Title))" @bind-value="todo.Title" />
                                <button type="submit" class="btn btn-save position-absolute top-50 start-100 translate-middle-y"
                                        title="Save Changes" aria-label="Save changes">
                                    <i class="bi bi-check-lg"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-auto g-1">
                            <button type="submit" class="btn-close"
                                    name="@nameof(IsDeleting)" value="true" title="Delete" aria-label="Delete"></button>
                        </div>
                    </div>
                    <div class="row validation">
                        <ValidationMessage For="() => todo.Title" />
                        <ValidationMessage For="() => todo" />
                    </div>
                </EditForm>
            </div>
        }
        @* Target form handler for all edit forms *@
        <form @formname="UpdateTodo" @onsubmit="@UpdateAsync"></form>
    </div>
}

@code {
    private EditContext? createEditContext;
    private ValidationMessageStore? createMessageStore;
    private Dictionary<int, EditContext> updateEditContexts = new();
    private Dictionary<int, ValidationMessageStore> updateMessageStores = new();
    private Todo[]? todos;

    [SupplyParameterFromForm]
    private Todo? CreatingTodo { get; set; }

    [SupplyParameterFromForm]
    private Todo? UpdatingTodo { get; set; }

    [SupplyParameterFromForm]
    private bool IsDeleting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CreatingTodo ??= new();
        createEditContext = new(CreatingTodo);
        createMessageStore = new(createEditContext);

        todos = await TodosApi.GetTodosAsync();
    }

    private async Task CreateAsync()
    {
        var (wasCreated, _, validationProblem) = await TodosApi.CreateTodoAsync(CreatingTodo!);

        if (wasCreated)
        {
            Navigation.Refresh();
        }
        else
        {
            createMessageStore.AddValidationErrors(createEditContext, validationProblem);
        }
    }

    private async Task UpdateAsync()
    {
        if (UpdatingTodo is not null
            && updateEditContexts.TryGetValue(UpdatingTodo.Id, out var editContext)
            && updateMessageStores.TryGetValue(UpdatingTodo.Id, out var messageStore))
        {
            if (IsDeleting)
            {
                await TodosApi.DeleteTodoAsync(UpdatingTodo.Id);
            }
            else
            {
                // Update the model on the EditContext with the changes from the form
                var contextTodo = (Todo)editContext.Model;
                contextTodo.Title = UpdatingTodo.Title;

                if (editContext.Validate())
                {
                    var (wasUpdated, validationProblem) = await TodosApi.UpdateTodoAsync(UpdatingTodo);
                    if (!wasUpdated)
                    {
                        messageStore.AddValidationErrors(editContext, validationProblem);
                        return;
                    }
                }
                else
                {
                    return;
                }
            }
        }
        Navigation.Refresh();
    }

    private (EditContext, ValidationMessageStore) GetFormContext(Todo todo)
    {
        var editContext = updateEditContexts.TryGetValue(todo.Id, out var ec) ? ec : new(todo);
        var messageStore = updateMessageStores.TryGetValue(todo.Id, out var ms) ? ms : new ValidationMessageStore(editContext);
        updateEditContexts.TryAdd(todo.Id, editContext);
        updateMessageStores.TryAdd(todo.Id, messageStore);
        return (editContext, messageStore);
    }

    private (string Icon, string Title, string Value) GetCompletedButtonAttributes(Todo todo)
    {
        var icon = todo.IsComplete ? "bi-check-circle-fill" : "bi-circle";
        var title = todo.IsComplete ? "Mark incomplete" : "Mark complete";
        var value = (todo.IsComplete ? bool.FalseString : bool.TrueString).ToLowerInvariant();
        return (icon, title, value);
    }
}
