@inject TodosApiClient TodosApi
@inject NavigationManager Navigation

<EditForm EditContext="createEditContext" OnValidSubmit="CreateAsync" FormName="CreateTodo" Enhance>
    <DataAnnotationsValidator />

    <div class="row g-2 align-items-center">
        <div class="col-7">
            <div class="form-floating">
                <InputText @bind-Value="CreatingTodo!.Title" id="title"
                           class="@createEditContext.GetFieldClass(() => CreatingTodo!.Title)" placeholder="" />
                <label for="title">What do you need to do?</label>
            </div>
        </div>
        <div class="col-sm">
            <button type="submit" class="btn btn-primary" disabled="@(!IsEnabled)">Add</button>
        </div>
    </div>
    <div class="row">
        <ValidationMessage For="() => CreatingTodo.Title" />
        <ValidationMessage For="() => CreatingTodo" />
    </div>
</EditForm>

@code {
    private EditContext? createEditContext;
    private ValidationMessageStore? createMessageStore;

    [SupplyParameterFromForm]
    private Todo? CreatingTodo { get; set; }

    [Parameter]
    public bool IsEnabled { get; set; }

    protected override void OnInitialized()
    {
        CreatingTodo ??= new();
        createEditContext = new(CreatingTodo);
        createMessageStore = new(createEditContext);
    }

    private async Task CreateAsync()
    {
        var (wasCreated, _, validationProblem) = await TodosApi.CreateTodoAsync(CreatingTodo!);

        if (!wasCreated)
        {
            createMessageStore.AddValidationErrors(createEditContext, validationProblem);
            return;
        }

        Navigation.Refresh();
    }
}
